select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
print(cran)
info
info
skip
print(cran,console)
print()
print.by(crane, console)
select(cran)
select(cran, X:country)
select(cran, all)
info
cran
select(cran,-time)
select(cran,-x:size)
select(cran,-X:size)
select(cran,-(X:size))
-5:20
select(cran,-(X:size))
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <="3.0.2", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > "100500"| r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
desc(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
install.packages("RQDA")
library("swirl", lib.loc="C:/Program Files/R/R-3.2.3/library")
swir()
swir()
swirl()
library(dplyr)
cran<- tbl_df(mydf)
rm("mydf")
cran
group_by(packageName())
info
?group_by
by_package<- group_by(.cran, packageName(add=FALSE))
info
by_package<- group_by(cran, package)
by_package
summarise(by_package)
summarise(by_package,mean(size) )
submit()
reset()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<- filter(pack_sum, 'count' > 679)
top_counts<- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<- arrange(top_counts, count)
top_counts_sorted<- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<- filter(pack_sum$unique > 465 )
info
filter(pack_sum, unique > 465)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted
top_unique_sorted<- arrange(top_unique, desc(unique))
top_unique_sorted
View(top_unique_sorted)
submit()
submit
submit()
submit()
View(result3)
cran%>%
select()%>%
print
info
cran%>%
select(ip_id, country, package, size)
print()
select(ip_id, country, package, size)%>%
print
> cran%>%
+ select(ip_id, country, package, size)%>%
print
cran%>%
+ select(ip_id, country, package, size)%>%
print
skip
skip
info
cran %>%
select(ip_id, country, package, size) %>%
print
info
skip
submit()
submit()
submit()
submit()
skip
info
submit()
reset()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
exit
0
swirl()
swirl()
swirl()
library("swirl", lib.loc="C:/Program Files/R/R-3.2.3/library")
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gatther
?gather
gather(students,students, sex, count, -grade)
gather(students, sex=male, count =female, -grade)
info
gather(students, sex, count, -grade)
students2
res<- gather(student2, sex_class, count, -grade)
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into =c("sex", "class"))
submit()
submit()
students3
submit()
submit()
info
submit()
?spread
submit
submit()
extract_numeric("class5")
submit()
submit()
submit()
reset()
reset()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(.passed, status)
info
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
info
bind_rows(passed, failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(192012--)
ymd(--192012)
ymd(1920/1/2)
ymd("1920/1/2")
dt1
ymd_hm(dt1)
ymd_hms(dt1)
hms(032214)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment = now())
info
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<- update(depart, hours=17, minutes=34)
depart
arrive<- nyc+hours(15)+minutes(50)
arrive<- depart+hours(15)+minutes(50)
?with_tz
arrive<- with_tz(arrive)
arrive<- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long<- new_interval(arrive, last_time)
how_long<- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/06hid.csv", method = "curl")
dateDownloaded <- date()
HD <- read.csv("./data/06hid.csv")
sum(!is.na(HD[HD$VAL >= 24, 37]))
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "q1.csv",
method = "curl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, color="blue")
boxplot(ppm,col="blue")
boxplot(ppm, col="blue", abline =12)
abline(h = 12)
hist(ppm, col="green")
rug()
rug(ppm)
rug(low)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col"green")
hist(ppm,col="green")
abline(v=12)
abline(v = 12, lwd=2)
abline(v = median(ppm), col ="magenta", lwd=4)
names(pollution)
reg<- table(pollution$region)
reg
barplot(reg,col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region)
info
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<- subset(pollution, "region"= "east")
east<- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
info
with(pollution, plot(latitude, pm25))
abline(12, lwd=2,lty=2)
info
abline(h = 12, lwd = 2, lty = 2)
info
lot(pollution$latitude, ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
info
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
swirl()
library(swirl)
swirl()
?Devices
plot(eruptions, waiting)
info
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting), main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
info
dev.copy(png, file = "geyserplot.png")
dev.off()
heads(cars)
head(cars)
with(cars, speed, dist)
with(cars, plot(speed, dist))
info
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
info
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
info
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
info
boxplot(Ozone~Month, airquality)
info
oxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
main("Ozone and Wind in New York City")
info
title(main="Ozone and Wind in New York City")
info
with(airquality, plot(Wind, Ozone))
title(main= "Ozone and Wind in New York City" )
length(Par)
Par(length)
info
length(par())
names(par())
par()$pin
par("fg")
?pch
info
par()$pch
par("lty")
info
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
info
may <- subset(airquality, Month==5)
info
points(may$Wind,may$Ozone,col="blue",pch=17)
info
otmay <- subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
info
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
info
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other
| Months")).
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months")).
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
info
abline(v=median(airquality$Wind),lty=2,lwd=2)
info
par(mfrow=c(1,2))
info
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
info
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
info
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
info
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
info
mtext("Ozone and Weather in New York City", outer = TRUE)
fh <- file("household_power_consumption.txt")
ba <- read.table(text = grep("^[1,2]/2/2007", readLines(fh), value = TRUE), col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), sep = ";", header = TRUE)
getwd
# set working directory (change this to fit your needs)
setwd('C:/Users/nnadozie/Documents/GitHub/ExData_Plotting1')
# required packages
library(data.table)
library(lubridate)
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='source data/power_consumption.zip')
unzip('source data/power_consumption.zip',exdir='source data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='source data/power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('source data/power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('source data/household_power_consumption.txt')) {
x<-file.remove('source data/household_power_consumption.txt')
}
source('C:/electricpowerplots.R')
source('C:/electricpowerplots.R')
source('C:/electricpowerplots.R')
source('~/GitHub/ExData_Plotting1/electricpowerplots.R')
source('~/GitHub/ExData_Plotting1/electricpowerplots.R')
source('~/GitHub/ExData_Plotting1/electricpowerplots.R')
fh <- file("household_power_consumption.txt")
ba <- read.table(text = grep("^[1,2]/2/2007", readLines(fh), value = TRUE), col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), sep = ";", header = TRUE)
# Generating Plot 1
hist(ba$Global_active_power, col = "red", main = paste("Global Active Power"), xlab = "Global Active Power (kilowatts)")
## Getting full dataset
data_full <- read.csv("household_power_consumption.txt", header = T, sep = ';',
na.strings = "?", nrows = 2075259, check.names = F,
stringsAsFactors = F, comment.char = "", quote = '\"')
data_full$Date <- as.Date(data_full$Date, format = "%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset = (Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Generating Plot 2
plot(data$Global_active_power ~ data$Datetime, type = "l",
ylab = "Global Active Power (kilowatts)", xlab = "")
## Generating Plot 3
with(data, {
plot(Sub_metering_1 ~ Datetime, type = "l",
ylab = "Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2 ~ Datetime, col = 'Red')
)
# set working directory (change this to fit your needs)
setwd('~/Source Code/GitHub/Exploratory-Data-Analysis')
# make sure the plots folder exists
if (!file.exists('plots')) {
dir.create('plots')
}
# load data
source('scripts/get_and_clean_data.R')
# open device
png(filename='plots/plot1.png',width=480,height=480,units='px')
# plot data
hist(power.consumption$GlobalActivePower,main='Global Active Power',xlab='Global Active Power (kilowatts)',col='red')
# Turn off device
x<-dev.off()
png(filename='plots/plot1.png',width=480,height=480,units='px')
# plot data
hist(power.consumption$GlobalActivePower,main='Global Active Power',xlab='Global Active Power (kilowatts)',col='red')
